<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="~/Content/layout.css" />
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @RenderSection("styles", required: false)
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Application name", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                </ul>
            </div>
        </div>
    </div>
    



    <!-- Floating Chat Button -->
    <button id="chatOpen" class="fixed bottom-5 right-5 w-14 h-14 rounded-full bg-blue-600 text-white shadow-lg hover:bg-blue-700 flex items-center justify-center z-50 transition-colors">
        <i class="fas fa-comments text-xl"></i>
    </button>
    <!-- Body -->
    <div class="container mx-auto py-6">
        @RenderBody()
    </div>

    <!-- Chat Box -->
    <div id="chatContainer" class="hidden fixed bottom-5 right-5 w-96 bg-white shadow-2xl rounded-2xl overflow-hidden border border-gray-200 z-50">
        <div class="bg-blue-600 text-white px-4 py-2 flex justify-between items-center">
            <span><i class="fas fa-robot mr-2"></i>Smart AI </span>
            <button id="chatClose" class="text-white hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div id="chatMessages" class="h-72 overflow-y-auto p-4 space-y-2 bg-gray-50"></div>
        <div class="p-3 border-t bg-white flex space-x-2">
            <input type="text" id="chatInput" class="flex-1 border rounded-lg px-3 py-2 focus:outline-none" placeholder="Nhập tin nhắn..." />
            <button id="chatSend" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const chatOpen = document.getElementById("chatOpen");
            const chatClose = document.getElementById("chatClose");
            const chatContainer = document.getElementById("chatContainer");
            const chatSend = document.getElementById("chatSend");
            const chatInput = document.getElementById("chatInput");
            const chatMessages = document.getElementById("chatMessages");
            const profileMenuToggle = document.getElementById("profileMenuToggle");
            const dropdownMenu = document.getElementById("dropdownMenu");
            // CHAT
            chatOpen.addEventListener("click", () => chatContainer.classList.remove("hidden"));
            if (chatClose) chatClose.addEventListener("click", () => chatContainer.classList.add("hidden"));

            function appendMessage(sender, text) {
                const div = document.createElement("div");
                div.className = sender === "Bạn" ? "text-right" : "text-left";
                div.innerHTML = `<div class="inline-block px-4 py-2 rounded-lg ${sender === "Bạn" ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-800"}"><b>${sender}:</b> ${text}</div>`;
                chatMessages.appendChild(div);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            async function sendMessage() {
                const msg = chatInput.value.trim();
                if (!msg) return;
                appendMessage("Bạn", msg);
                chatInput.value = "";
                try {
                    const response = await fetch("/Chat/SendMessage", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ message: msg })
                    });
                    if (!response.ok) throw new Error("Server error");
                    const data = await response.json();
                    appendMessage("AI", data.reply || "❌ AI chưa trả lời");
                } catch (err) {
                    appendMessage("AI", "❌ Lỗi server hoặc AI");
                    console.error(err);
                }
            }

            chatSend.addEventListener("click", sendMessage);
            chatInput.addEventListener("keypress", e => { if (e.key === "Enter") { e.preventDefault(); sendMessage(); } });

            // PROFILE DROPDOWN
            if (profileMenuToggle && dropdownMenu) {
                profileMenuToggle.addEventListener("click", e => { e.stopPropagation(); dropdownMenu.classList.toggle("hidden"); });
                document.addEventListener("click", e => { if (!profileMenuToggle.contains(e.target) && !dropdownMenu.contains(e.target)) dropdownMenu.classList.add("hidden"); });
            }
        });
    </script>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>
